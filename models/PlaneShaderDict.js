var PlaneShaderDict = {
  vertexShader: [
    "varying vec2 vUv;",
    "varying vec3 vpos;",
    "void main() {",
    "    vUv = uv;",
    "    gl_Position = projectionMatrix*modelViewMatrix * vec4(position, 1.0 );",
    "    vpos = position;",
    "}",
  ],
  fragmentShader: [
    " varying vec2 vUv;",
    " varying vec3 vpos;",
    " uniform sampler2D tex0;",
    " uniform vec3 center0;",
    " uniform vec3 axisX0;",
    " uniform vec3 axisY0;",
    " uniform vec3 center1;",
    " uniform vec3 axisX1;",
    " uniform vec3 axisY1;	 	 ",
    " uniform float width0;",
    " uniform float width1;       ",
    " void main() {	",
    " 	float distX0 = dot((vpos - center0),axisX0);",
    " 	float distY0 = dot((vpos - center0),axisY0);",
    " 	float len0 = length(vec2(distX0/2.5,distY0)) / width0;",
    " 	float distX1 = dot((vpos - center1),axisX1);",
    " 	float distY1 = dot((vpos - center1),axisY1);",
    " 	float len1 = length(vec2(distX1/2.5,distY1)) / width1;",
    " 	float len = min(len0,len1);",
    " 	//len = pow(len,4.0);",
    " 	if(len > 1.0) len = 1.0;",
    " 	//len = min(len,c0);",
    " 	gl_FragColor = vec4(vec3(0.0),1.0-len);",
    " }",
  ],
};
